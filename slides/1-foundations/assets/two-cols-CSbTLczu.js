import{Q as g,z as n,f as a,o as l,g as t,R as y,B as d,t as m,i as f,n as u,j as c}from"./modules/vue-DNA4_otk.js";import{u as w}from"./slidev/context-7s16n28d.js";import{c as v,a as k}from"./layoutHelper-HtdtuDyr.js";import{_ as T}from"./index-Bj99BgCf.js";const $={key:0,class:"slidev-layout default error"},b={key:2,class:"end-footer"},q={__name:"two-cols",props:{columns:{default:"is-one-half"},align:{default:"lt-lt"},color:{default:"white"}},setup(p){g(o=>({"0a1067fc":r.value.l,"3b733b58":r.value.l+1,"0a106802":r.value.r})),w();const s=p,i=n(()=>{const o=s.align.split("-");return{l:v(o[0]),r:v(o[1])}}),r=n(()=>k(s.columns)),h=n(()=>`neversink-${s.color}-scheme`);return(o,e)=>r.value=="error"||i.value.l=="error"||i.value.r=="error"?(l(),a("div",$,[e[7]||(e[7]=t("span",{class:"ns-c-warning"},[t("b",null,"Error"),d(": invalid layout params.")],-1)),e[8]||(e[8]=t("hr",null,null,-1)),t("p",null,[e[0]||(e[0]=d(" There are two parameters: ",-1)),e[1]||(e[1]=t("code",null,"columns",-1)),e[2]||(e[2]=d(" and ",-1)),e[3]||(e[3]=t("code",null,"align",-1)),e[4]||(e[4]=d(". Currently: ",-1)),t("code",null,"columns: "+m(s.columns),1),e[5]||(e[5]=d(" and ",-1)),t("code",null,"align: "+m(s.align),1),e[6]||(e[6]=d(". ",-1))]),e[9]||(e[9]=y("<p data-v-f72f9d2d> Options for <code data-v-f72f9d2d>columns</code> are divided into 12 column units. So with <code data-v-f72f9d2d>columns: is-1-11</code> the left column is 1/12 wide and the the right columns is 11/12 wide. The component admits a short had of only specifying the left column (<code data-v-f72f9d2d>columns: is-1</code> does the same thing). In addition there are short hands like <code data-v-f72f9d2d>columns: is-one-quarter</code> which resolves to <code data-v-f72f9d2d>is-3-9</code>, etc... </p><p data-v-f72f9d2d> Here are a bunch of examples: <code data-v-f72f9d2d> is-1, is-2, is-3, is-4, is-5, is-6, is-7, is-8, is-9, is-10, is-11, is-1-11, is-2-10, is-3-9, is-4-8, is-5-7, is-6-6, is-7-5, is-8-4, is-9-3, is-10-2, is-11-1, is-one-quarter, is-one-third, is-one-half, is-two-thirds, is-three-quarters </code></p><p data-v-f72f9d2d>In addition you can specify &quot;slots&quot; of the page with <code data-v-f72f9d2d>:: left ::</code>, and <code data-v-f72f9d2d>:: right::</code>.</p><p data-v-f72f9d2d> The <code data-v-f72f9d2d>align</code> parameter determines how the columns look. The notation is for example <code data-v-f72f9d2d>align: cm-cm</code>. The first part is for the left column, and the second part is for the right column. The first letter is (<code data-v-f72f9d2d>c</code> for center, <code data-v-f72f9d2d>l</code> for left, <code data-v-f72f9d2d>r</code> for right). The second letter is vertical alignment (<code data-v-f72f9d2d>t</code> for top, <code data-v-f72f9d2d>m</code> for middle, <code data-v-f72f9d2d>b</code> for bottom). </p>",4))])):(l(),a("div",{key:1,class:u(["slidev-layout default two-cols slidecolor",h.value])},[o.$slots.left?(l(),a("div",{key:0,class:u(["left-col",i.value.l])},[c(o.$slots,"left",{},void 0,!0)],2)):f("v-if",!0),o.$slots.right?(l(),a("div",{key:1,class:u(["right-col",i.value.r])},[c(o.$slots,"right",{},void 0,!0)],2)):f("v-if",!0),o.$slots.default?(l(),a("div",b,[c(o.$slots,"default",{},void 0,!0)])):f("v-if",!0)],2))}},B=T(q,[["__scopeId","data-v-f72f9d2d"]]);export{B as I};
